{"ast":null,"code":"import Axios from 'axios';\nimport Cookies from 'js-cookie';\nimport api from '../api/api';\nimport { getCredentials, isLoggedIn } from '../services/authService';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_VERFIY_RESEND, USER_REGISTER_FAIL, USER_PASSWORD_RESET_REQUEST, USER_PASSWORD_RESET_SUCCESS, USER_PASSWORD_RESET_FAIL, USER_PASSWORD_RESET_COMPLETE, USER_LOGOUT, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, USER_ROLES_REQUEST, USER_ROLES_SUCCESS, USER_ROLES_FAIL } from '../constants/userConstants';\nimport { setCredentials, removeCredentials } from '../services/authService';\nimport clearStorage from '../services/clearStorage';\nimport { setUserInfo } from '../services/userService';\nconst timeout = 1000;\nconst headers = {\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${getCredentials()}`\n  }\n};\n\nconst signin = (username, password, history, setError) => async (dispatch) => {\n  console.log(username, password);\n  removeCredentials();\n  clearStorage();\n  dispatch({\n    type: USER_SIGNIN_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await api.post('/admin/login', {\n      username,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, {\n      timeout\n    });\n    setCredentials(data.response.token);\n    setUserInfo(data.response.user.Email, data.response.user.Username, data.response.user.Role); // setError(null);\n\n    localStorage.removeItem(\"signRe\");\n    localStorage.setItem(\"signRe\", true);\n    dispatch({\n      type: USER_SIGNIN_SUCCESS\n    }); // setRedirect('app');\n\n    console.log(history);\n    history.replace('/app');\n  } catch (error) {\n    console.log(error);\n    const res = { ...error\n    };\n    setError('error');\n    console.log('sign req error ', res);\n\n    if (res.response) {\n      dispatch({\n        type: USER_SIGNIN_FAIL\n      });\n      setError('invalid request');\n    } else {\n      dispatch({\n        type: USER_SIGNIN_FAIL\n      });\n      setError('Connection timeout');\n    }\n  }\n};\n\nconst getAllUser = () => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await api.post('/admin/getAdminUsers', {}, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${getCredentials()}`\n        }\n      });\n      dispatch({\n        type: 'ADD_ALL_USERS',\n        payload: data.response\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst getRoles = (setShowProgress, setStatus) => async dispatch => {\n  setShowProgress(true);\n  dispatch({\n    type: USER_ROLES_REQUEST,\n    payload: {}\n  });\n\n  if (isLoggedIn() == false) {\n    dispatch({\n      type: USER_ROLES_FAIL\n    });\n    setStatus(401);\n  } else try {\n    const {\n      data\n    } = await api.post('/admin/getFeatures', {}, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${getCredentials()}`\n      }\n    }, {\n      withCredentials: true\n    }, {\n      timeout\n    });\n    console.log(data, 'roles');\n    dispatch({\n      type: USER_ROLES_SUCCESS,\n      payload: data.response\n    });\n    setShowProgress(false);\n  } catch (error) {\n    const res = { ...error\n    }; // clearStorage()\n    // removeCredentials()\n\n    console.log('roles error ', res);\n\n    if (res.response) {\n      dispatch({\n        type: USER_ROLES_FAIL\n      });\n\n      if (res.response.status === 401) {\n        removeCredentials();\n        setStatus(401);\n      }\n\n      setShowProgress(true);\n    } else {\n      dispatch({\n        type: USER_ROLES_FAIL\n      });\n      setShowProgress(true);\n    }\n  }\n};\n\nconst register = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const data = await api.post('/signup/email', {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('register req', data);\n    console.log('st', data.status);\n\n    if (data.status === 200) {\n      Cookies.set('regRe', true);\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: {\n          email\n        },\n        status: 200\n      });\n    } //TODO\n    // Cookie.set('userInfo', JSON.stringify(data));\n\n  } catch (error) {\n    const res = { ...error\n    };\n    Cookies.set('regRe', false);\n    console.log('reg req error ', res);\n    if (res.response) dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: res.response.data,\n      status: res.response.status\n    });else dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: 'Not found',\n      status: 404\n    });\n  }\n};\n\nconst resetPassword = (email, setDone, setError) => async dispatch => {\n  console.log('reset password', email);\n  dispatch({\n    type: USER_PASSWORD_RESET_REQUEST\n  });\n\n  try {\n    const data = await api.post('/admin/forgotPassword', {\n      email\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    dispatch({\n      type: USER_PASSWORD_RESET_SUCCESS\n    }); //TODO\n\n    setDone(true);\n    setError(null);\n  } catch (err) {\n    dispatch({\n      type: USER_PASSWORD_RESET_FAIL\n    }); //TODO\n\n    setError('Password reset failed');\n  }\n};\n\nconst passwordResetComplete = () => dispatch => {\n  dispatch({\n    type: USER_PASSWORD_RESET_COMPLETE\n  });\n};\n\nconst logout = history => dispatch => {\n  dispatch({\n    type: USER_LOGOUT\n  });\n  removeCredentials();\n  clearStorage();\n  history.replace('/app/login');\n};\n\nexport { signin, register, resetPassword, passwordResetComplete, getRoles, logout, getAllUser };","map":{"version":3,"sources":["E:/Work-Files/Maxffort/Client-Projects/HSST-Madhi-Consultancy/Code/dev/edu-project/live/edu-app-admin/src/actions/userActions.js"],"names":["Axios","Cookies","api","getCredentials","isLoggedIn","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_VERFIY_RESEND","USER_REGISTER_FAIL","USER_PASSWORD_RESET_REQUEST","USER_PASSWORD_RESET_SUCCESS","USER_PASSWORD_RESET_FAIL","USER_PASSWORD_RESET_COMPLETE","USER_LOGOUT","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_ROLES_REQUEST","USER_ROLES_SUCCESS","USER_ROLES_FAIL","setCredentials","removeCredentials","clearStorage","setUserInfo","timeout","headers","Authorization","signin","username","password","history","setError","dispatch","console","log","type","data","post","response","token","user","Email","Username","Role","localStorage","removeItem","setItem","replace","error","res","getAllUser","payload","getRoles","setShowProgress","setStatus","withCredentials","status","register","email","set","resetPassword","setDone","err","passwordResetComplete","logout"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport api from '../api/api';\r\nimport { getCredentials, isLoggedIn } from '../services/authService';\r\n\r\nimport {\r\n    USER_SIGNIN_REQUEST,\r\n    USER_SIGNIN_SUCCESS,\r\n    USER_SIGNIN_FAIL,   \r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_VERFIY_RESEND,\r\n    USER_REGISTER_FAIL,\r\n    USER_PASSWORD_RESET_REQUEST,\r\n    USER_PASSWORD_RESET_SUCCESS,\r\n    USER_PASSWORD_RESET_FAIL,\r\n    USER_PASSWORD_RESET_COMPLETE,\r\n    USER_LOGOUT,\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n    USER_ROLES_REQUEST,\r\n    USER_ROLES_SUCCESS,\r\n    USER_ROLES_FAIL,\r\n} from '../constants/userConstants';\r\nimport { setCredentials, removeCredentials } from '../services/authService';\r\nimport clearStorage from '../services/clearStorage';\r\nimport { setUserInfo } from '../services/userService';\r\nconst timeout = 1000;\r\nconst headers = {\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${getCredentials()}`,\r\n    },\r\n};\r\n\r\nconst signin = (username, password, history, setError) => async (\r\n    dispatch\r\n) => {\r\n    console.log(username, password);\r\n    removeCredentials();\r\n    clearStorage();\r\n    dispatch({ type: USER_SIGNIN_REQUEST, });\r\n    try {\r\n        const { data } = await api.post(\r\n            '/admin/login',\r\n            { username, password },\r\n            {\r\n                headers: { 'Content-Type': 'application/json' },\r\n            },\r\n            { timeout }\r\n        );\r\n        setCredentials(data.response.token);\r\n        setUserInfo(\r\n            data.response.user.Email,\r\n            data.response.user.Username,\r\n            data.response.user.Role\r\n        );\r\n        // setError(null);\r\n        localStorage.removeItem(\"signRe\")\r\n        localStorage.setItem(\"signRe\", true);\r\n        dispatch({ type: USER_SIGNIN_SUCCESS});\r\n        // setRedirect('app');\r\n        console.log(history);\r\n        history.replace('/app')\r\n    } catch (error) {\r\n        console.log(error);\r\n        const res = { ...error };\r\n        setError('error');\r\n        console.log('sign req error ', res);\r\n        if (res.response) {\r\n            dispatch({\r\n                type: USER_SIGNIN_FAIL,\r\n            });\r\n            setError('invalid request');\r\n        } else {\r\n            dispatch({\r\n                type: USER_SIGNIN_FAIL,\r\n            });\r\n            setError('Connection timeout');\r\n        }\r\n    }\r\n};\r\n\r\nconst getAllUser = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const { data } = await api.post(\r\n                '/admin/getAdminUsers',\r\n                {},\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${getCredentials()}`,\r\n                    },\r\n                }\r\n            );\r\n            dispatch({\r\n                type: 'ADD_ALL_USERS',\r\n                payload: data.response,\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n};\r\n\r\nconst getRoles = (setShowProgress, setStatus) => async (dispatch) => {\r\n    setShowProgress(true);\r\n    dispatch({ type: USER_ROLES_REQUEST, payload: {} });\r\n    if (isLoggedIn()==false) {\r\n        dispatch({\r\n            type: USER_ROLES_FAIL,\r\n        });\r\n        setStatus(401);\r\n    }else\r\n    \r\n    try {\r\n        const { data } = await api.post(\r\n            '/admin/getFeatures',\r\n            {},\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${getCredentials()}`,\r\n                },\r\n            },\r\n            { withCredentials: true },\r\n            { timeout }\r\n        );\r\n        console.log(data, 'roles');\r\n        dispatch({ type: USER_ROLES_SUCCESS, payload: data.response });\r\n        setShowProgress(false);\r\n    } catch (error) {\r\n        const res = { ...error };\r\n        // clearStorage()\r\n        // removeCredentials()\r\n        console.log('roles error ', res);\r\n        if (res.response) {\r\n            dispatch({\r\n                type: USER_ROLES_FAIL,\r\n            });\r\n            if (res.response.status === 401) {\r\n                removeCredentials();\r\n                setStatus(401);\r\n            }\r\n            setShowProgress(true);\r\n        } else {\r\n            dispatch({\r\n                type: USER_ROLES_FAIL,\r\n            });\r\n            setShowProgress(true);\r\n        }\r\n    }\r\n};\r\n\r\nconst register = (email, password) => async (dispatch) => {\r\n    dispatch({ type: USER_REGISTER_REQUEST, payload: { email, password } });\r\n    try {\r\n        const data = await api.post(\r\n            '/signup/email',\r\n            { email, password },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            }\r\n        );\r\n        console.log('register req', data);\r\n        console.log('st', data.status);\r\n        if (data.status === 200) {\r\n            Cookies.set('regRe', true);\r\n            dispatch({\r\n                type: USER_REGISTER_SUCCESS,\r\n                payload: { email },\r\n                status: 200,\r\n            });\r\n        } //TODO\r\n        // Cookie.set('userInfo', JSON.stringify(data));\r\n    } catch (error) {\r\n        const res = { ...error };\r\n        Cookies.set('regRe', false);\r\n        console.log('reg req error ', res);\r\n        if (res.response)\r\n            dispatch({\r\n                type: USER_REGISTER_FAIL,\r\n                payload: res.response.data,\r\n                status: res.response.status,\r\n            });\r\n        else\r\n            dispatch({\r\n                type: USER_REGISTER_FAIL,\r\n                payload: 'Not found',\r\n                status: 404,\r\n            });\r\n    }\r\n};\r\n\r\nconst resetPassword = (email, setDone, setError) => async (dispatch) => {\r\n    console.log('reset password', email);\r\n    dispatch({ type: USER_PASSWORD_RESET_REQUEST });\r\n    try {\r\n        const data = await api.post(\r\n            '/admin/forgotPassword',\r\n            { email },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            }\r\n        );\r\n        dispatch({ type: USER_PASSWORD_RESET_SUCCESS }); //TODO\r\n        setDone(true);\r\n        setError(null);\r\n    } catch (err) {\r\n        dispatch({\r\n            type: USER_PASSWORD_RESET_FAIL,\r\n        }); //TODO\r\n        setError('Password reset failed');\r\n    }\r\n};\r\nconst passwordResetComplete = () => (dispatch) => {\r\n    dispatch({ type: USER_PASSWORD_RESET_COMPLETE });\r\n};\r\nconst logout = (history) => (dispatch) => {\r\n    dispatch({ type: USER_LOGOUT });\r\n    removeCredentials();\r\n    clearStorage();\r\n    history.replace('/app/login');\r\n};\r\n\r\nexport {\r\n    signin,\r\n    register,\r\n    resetPassword,\r\n    passwordResetComplete,\r\n    getRoles,\r\n    logout,\r\n    getAllUser,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}