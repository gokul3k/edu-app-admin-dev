{"ast":null,"code":"import api from '../api/api';\nimport { GET_EXAM_FAIL, GET_EXAM_SUCCESS, GET_EXAM_REQUEST, GET_ALL_EXAMS, GET_EXAM_DETAIL, GET_EXAM_INSTRUCTIONS, GET_EXAM_QUESTIONS, PUBLISH_EXAM_FAIL, PUBLISH_EXAM_REQUEST, PUBLISH_EXAM_SUCCESS } from '../constants/examConstants';\nimport { getCredentials } from '../services/authService';\n\nconst getAllExams = () => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await api.post('/admin/getExams', {\n        limit: 10,\n        offset: 0\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${getCredentials()}`\n        }\n      }, {\n        timeout: 1000\n      });\n      dispatch({\n        type: GET_ALL_EXAMS,\n        payload: data.response\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst getExam = id => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: GET_EXAM_REQUEST\n      });\n      const {\n        data\n      } = await api.post('/admin/getExamDetails', {\n        id\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${getCredentials()}`\n        }\n      }, {\n        timeout: 1000\n      });\n      console.log(data);\n      dispatch({\n        type: GET_EXAM_SUCCESS,\n        details: data.response.exam,\n        questions: data.response.questions,\n        instructions: data.response.instructions\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: GET_EXAM_FAIL\n      });\n    }\n  };\n};\n\nconst getExamDetails = details => ({\n  type: GET_EXAM_DETAIL,\n  details: details\n});\n\nconst getExamInstructions = instructions => ({\n  type: GET_EXAM_INSTRUCTIONS,\n  instructions: instructions\n});\n\nconst getExamQuestions = questions => ({\n  type: GET_EXAM_QUESTIONS,\n  questions: questions\n});\n\nconst createExam = (details, instructions, questions) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: PUBLISH_EXAM_REQUEST\n    });\n\n    try {\n      console.log(getState().publishExam);\n      const {\n        data\n      } = await api.post('/admin/createExam', {\n        exam: details,\n        instructions: instructions,\n        questions: questions\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${getCredentials()}`\n        }\n      }, {\n        timeout: 1000\n      });\n      dispatch({\n        type: PUBLISH_EXAM_SUCCESS,\n        payload: data.response\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: PUBLISH_EXAM_FAIL\n      });\n    }\n  };\n};\n\nconst resetPublishExam = () => ({\n  type: \"RESET_PUBLISH_EXAM\"\n});\n\nexport { getAllExams, createExam, getExamDetails, getExamQuestions, getExamInstructions, resetPublishExam, getExam };","map":{"version":3,"sources":["E:/Work-Files/Maxffort/Client-Projects/HSST-Madhi-Consultancy/Code/dev/edu-project/live/edu-app-admin/src/actions/examActions.js"],"names":["api","GET_EXAM_FAIL","GET_EXAM_SUCCESS","GET_EXAM_REQUEST","GET_ALL_EXAMS","GET_EXAM_DETAIL","GET_EXAM_INSTRUCTIONS","GET_EXAM_QUESTIONS","PUBLISH_EXAM_FAIL","PUBLISH_EXAM_REQUEST","PUBLISH_EXAM_SUCCESS","getCredentials","getAllExams","dispatch","data","post","limit","offset","headers","Authorization","timeout","type","payload","response","error","console","log","getExam","id","details","exam","questions","instructions","getExamDetails","getExamInstructions","getExamQuestions","createExam","getState","publishExam","resetPublishExam"],"mappings":"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","sourcesContent":["import api from '../api/api';\r\nimport { GET_EXAM_FAIL,GET_EXAM_SUCCESS,GET_EXAM_REQUEST,GET_ALL_EXAMS, GET_EXAM_DETAIL, GET_EXAM_INSTRUCTIONS, GET_EXAM_QUESTIONS, PUBLISH_EXAM_FAIL, PUBLISH_EXAM_REQUEST, PUBLISH_EXAM_SUCCESS } from '../constants/examConstants';\r\nimport { getCredentials } from '../services/authService';\r\n\r\nconst getAllExams = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const { data } = await api.post(\r\n                '/admin/getExams',\r\n                {limit:10,offset:0},\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${getCredentials()}`,\r\n                    },\r\n                },\r\n                {timeout:1000}\r\n            );\r\n            dispatch({\r\n                type: GET_ALL_EXAMS,\r\n                payload: data.response,\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n};\r\nconst getExam = (id) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({type:GET_EXAM_REQUEST})\r\n\r\n            const {data} = await api.post(\r\n                '/admin/getExamDetails',{id},\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${getCredentials()}`,\r\n                    },\r\n                },\r\n                {timeout:1000}\r\n            );\r\n            console.log(data)\r\n            dispatch({\r\n                type: GET_EXAM_SUCCESS,\r\n                details:data.response.exam,\r\n                questions:data.response.questions,\r\n                instructions:data.response.instructions,\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            dispatch({type:GET_EXAM_FAIL})\r\n\r\n        }\r\n    };\r\n};\r\n\r\nconst getExamDetails=details=>({type:GET_EXAM_DETAIL,details:details})\r\nconst getExamInstructions=instructions=>({type:GET_EXAM_INSTRUCTIONS,instructions:instructions})\r\nconst getExamQuestions=questions=>({type:GET_EXAM_QUESTIONS,questions:questions})\r\n\r\nconst createExam = (details,instructions,questions)=>{\r\n    return async (dispatch,getState) => {\r\n        dispatch({type:PUBLISH_EXAM_REQUEST})\r\n        try {\r\n            console.log(getState().publishExam)\r\n            const { data } = await api.post(\r\n                '/admin/createExam',\r\n                {exam:details,instructions:instructions,questions:questions},\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${getCredentials()}`,\r\n                    },\r\n                },\r\n                {timeout:1000}\r\n            );\r\n            dispatch({\r\n                type: PUBLISH_EXAM_SUCCESS,\r\n                payload: data.response,\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            dispatch({type:PUBLISH_EXAM_FAIL})\r\n        }\r\n    };\r\n}\r\n\r\nconst resetPublishExam = ()=>({type:\"RESET_PUBLISH_EXAM\"})\r\n\r\nexport {\r\n    getAllExams,\r\n    createExam,\r\n    getExamDetails,\r\n    getExamQuestions,\r\n    getExamInstructions,\r\n    resetPublishExam,\r\n    getExam,\r\n}"]},"metadata":{},"sourceType":"module"}