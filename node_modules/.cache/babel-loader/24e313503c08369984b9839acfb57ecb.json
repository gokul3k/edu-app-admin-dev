{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work-Files\\\\Maxffort\\\\Client-Projects\\\\HSST-Madhi-Consultancy\\\\Code\\\\dev\\\\edu-project\\\\live\\\\edu-app-admin\\\\src\\\\components\\\\buttons\\\\ExcelReader\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport XLSX from \"xlsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  input: {\n    display: \"none\"\n  },\n  btn: {\n    backgroundColor: \"#388e3c\",\n    color: \"white\",\n    borderColor: '#388e3c',\n    fontSize: \".8rem\",\n    '&:hover': {\n      backgroundColor: 'white',\n      color: \"#388e3c\",\n      borderColor: '#388e3c'\n    },\n    '&:active': {\n      backgroundColor: 'white',\n      color: \"#388e3c\",\n      borderColor: '#388e3c'\n    },\n    \"& .MuiTouchRipple-root span\": {\n      backgroundColor: 'grey!important',\n      opacity: .3\n    }\n  }\n}));\nexport default function ExcelReader({\n  setData\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [cols, setCols] = useState([]);\n\n  const handleChange = e => {\n    const files = e.target.files;\n\n    if (files && files[0]) {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = e => {\n        /* Parse data */\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? \"binary\" : \"array\",\n          bookVBA: true\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_json(ws);\n        /* Update state */\n\n        setData(data);\n        setCols(make_cols(ws[\"!ref\"]));\n      };\n\n      try {\n        if (rABS) {\n          reader.readAsBinaryString(files[0]);\n        } else {\n          reader.readAsArrayBuffer(files[0]);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    accept: \"xlsx/*\",\n    className: classes.input,\n    id: \"contained-button-file\",\n    multiple: true,\n    type: \"file\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"contained-button-file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    variant: \"contained\",\n    className: classes.btn,\n    component: \"span\",\n    startIcon: /*#__PURE__*/React.createElement(CloudUploadIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 102\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Upload\")));\n}\n\n_s(ExcelReader, \"IsxTu93TM5Bvuxyn+yrZ7X6GU/I=\", false, function () {\n  return [useStyles];\n});\n\n_c = ExcelReader;\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ExcelReader\");","map":{"version":3,"sources":["E:/Work-Files/Maxffort/Client-Projects/HSST-Madhi-Consultancy/Code/dev/edu-project/live/edu-app-admin/src/components/buttons/ExcelReader/index.js"],"names":["React","useState","XLSX","makeStyles","Button","CloudUploadIcon","useStyles","theme","root","input","display","btn","backgroundColor","color","borderColor","fontSize","opacity","ExcelReader","setData","classes","cols","setCols","handleChange","e","files","target","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","make_cols","readAsArrayBuffer","error","console","log","refstr","o","C","decode_range","c","i","name","encode_col","key"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport XLSX from \"xlsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  btn:{\r\n    backgroundColor:\"#388e3c\",\r\n    color:\"white\",\r\n    borderColor: '#388e3c',\r\n    fontSize:\".8rem\",\r\n    '&:hover': {\r\n        backgroundColor: 'white',\r\n        color:\"#388e3c\",\r\n        borderColor: '#388e3c',\r\n      },\r\n      '&:active': {\r\n        backgroundColor: 'white',\r\n        color:\"#388e3c\",\r\n        borderColor: '#388e3c',\r\n      },\r\n      \"& .MuiTouchRipple-root span\":{\r\n        backgroundColor: 'grey!important',\r\n        opacity: .3,\r\n      },\r\n  },\r\n}));\r\nexport default function ExcelReader({setData}) {\r\n  const classes = useStyles();\r\n  const [cols, setCols] = useState([]);\r\n\r\n  const handleChange = (e) => {\r\n    const files = e.target.files;\r\n    if (files && files[0]) {\r\n\r\n      const reader = new FileReader();\r\n      const rABS = !!reader.readAsBinaryString;\r\n\r\n      reader.onload = (e) => {\r\n        /* Parse data */\r\n        const bstr = e.target.result;\r\n        const wb = XLSX.read(bstr, {\r\n          type: rABS ? \"binary\" : \"array\",\r\n          bookVBA: true,\r\n        });\r\n        /* Get first worksheet */\r\n        const wsname = wb.SheetNames[0];\r\n        const ws = wb.Sheets[wsname];\r\n        /* Convert array of arrays */\r\n        const data = XLSX.utils.sheet_to_json(ws);\r\n        /* Update state */\r\n        setData(data)\r\n        setCols(make_cols(ws[\"!ref\"]));\r\n      };\r\n      try {\r\n        if (rABS) {\r\n          reader.readAsBinaryString(files[0]);\r\n        } else {\r\n          reader.readAsArrayBuffer(files[0]);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <input\r\n        accept=\"xlsx/*\"\r\n        className={classes.input}\r\n        id=\"contained-button-file\"\r\n        multiple\r\n        type=\"file\"\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"contained-button-file\">\r\n        <Button size=\"small\" variant=\"contained\" className={classes.btn} component=\"span\" startIcon={<CloudUploadIcon />}>\r\n          Upload\r\n        </Button>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst make_cols = (refstr) => {\r\n  let o = [],\r\n    C = XLSX.utils.decode_range(refstr).e.c + 1;\r\n  for (var i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i };\r\n  return o;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}