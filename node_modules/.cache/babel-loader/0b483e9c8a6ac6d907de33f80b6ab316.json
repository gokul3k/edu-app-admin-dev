{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work-Files\\\\Maxffort\\\\Client-Projects\\\\HSST-Madhi-Consultancy\\\\Code\\\\dev\\\\edu-project\\\\live\\\\edu-app-admin\\\\src\\\\components\\\\AddInterviewComponent\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextField, Button, MenuItem, InputLabel, makeStyles, Select, Grid, Card, CardContent, Typography } from '@material-ui/core';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CustomTextField from '../CustomTextField';\nimport CustomDateField from '../CustomDateField';\nimport { StyleSharp } from '@material-ui/icons';\nimport api from '../../api/api';\nimport { getCredentials } from '../../services/authService';\nimport SnackBar from '../SnackBar';\nimport { resetSelectedStudents } from 'actions/studentActions';\nimport moment from 'moment';\nconst useStyles = makeStyles(theme => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff'\n  },\n  container: {\n    display: 'flex',\n    flex: 1\n  },\n  form: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column'\n  },\n  heading: {\n    fontSize: 14,\n    fontWeight: 600\n  },\n  dropDown: {\n    height: 35,\n    width: 200\n  }\n}));\n\nconst AddInterviewComponent = props => {\n  _s();\n\n  const styleClasses = useStyles();\n  const [loading, setLoading] = useState(false);\n  const [adminUsers, setAdminUsers] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [message, setMesssage] = useState('');\n  const [severity, setSeverity] = useState('');\n  const [assignTo, setAssignTo] = useState('assignTo');\n  const dispatch = useDispatch();\n  const {\n    selected\n  } = useSelector(state => state.selectedStudents);\n  useEffect(() => {\n    dispatch(resetSelectedStudents());\n    return () => {};\n  }, []);\n  const formik = useFormik({\n    initialValues: {\n      interviewName: '',\n      interviewBy: '',\n      date: '',\n      assignTo: 'assignTo'\n    },\n    validationSchema: Yup.object({\n      interviewName: Yup.string().required('This field is required'),\n      interviewBy: Yup.string().required('This field is required'),\n      date: Yup.date().required('This field is required')\n    }),\n    onSubmit: values => {\n      const formValues = { ...values,\n        assignTo\n      };\n      saveInterview(formValues, selected);\n    }\n  });\n  const formRef = useRef(null);\n\n  const handleReset = () => {\n    formik.resetForm();\n    formRef.current.reset();\n  };\n\n  useEffect(() => {\n    getAdminUsers();\n  }, []);\n\n  const saveInterview = async (interview, students) => {\n    try {\n      setLoading(true);\n      await api.post(\"/admin/saveInterview\", {\n        interview,\n        students\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${getCredentials()}`\n        }\n      }, {\n        timeout: 1000\n      });\n      handleReset();\n      setLoading(false);\n      setMesssage('Interview succesfully created');\n      setSeverity('success');\n      setOpen(true);\n      setTimeout(() => {\n        props.history.goBack();\n      }, 1000);\n    } catch (error) {\n      setLoading(false);\n      setMesssage('Interview creation failed');\n      setSeverity('error');\n      setOpen(true);\n      console.log(error);\n    }\n  };\n\n  const getAdminUsers = async () => {\n    try {\n      const res = await api.post(\"/admin/getAdminUsers\", null, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${getCredentials()}`\n        }\n      }, {\n        timeout: 1000\n      });\n      setAdminUsers(res.data.response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styleClasses.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, loading && /*#__PURE__*/React.createElement(Backdrop, {\n    className: styleClasses.backdrop,\n    open: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  })), open && /*#__PURE__*/React.createElement(SnackBar, {\n    open: open,\n    message: message,\n    severity: severity,\n    setOpen: setOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    ref: formRef,\n    noValidate: true,\n    className: styleClasses.form,\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: styleClasses.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 29\n    }\n  }, \"Create Interview\")), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"small\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 29\n    }\n  }, \"Upload\")), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"space-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CustomTextField, {\n    error: !!formik.errors.interviewName && formik.touched.interviewName,\n    helperText: !!formik.errors.interviewName && formik.touched.interviewName ? formik.errors.interviewName : '',\n    onChange: formik.handleChange,\n    value: formik.values.interviewName,\n    name: \"interviewName\",\n    label: \"Interview Name\",\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(CustomDateField, {\n    label: \"Date of Interview\",\n    type: \"date\",\n    name: \"date\",\n    InputProps: {\n      inputProps: {\n        min: moment().format('YYYY-MM-DD')\n      }\n    },\n    error: !!formik.errors.date && formik.touched.date,\n    helperText: !!formik.errors.date && formik.touched.date ? formik.errors.date : '',\n    InputLabelProps: {\n      shrink: true\n    },\n    value: formik.values.date,\n    onChange: event => {\n      formik.setFieldValue('date', event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"space-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CustomTextField, {\n    error: !!formik.errors.interviewBy && formik.touched.interviewBy,\n    helperText: !!formik.errors.interviewBy && formik.touched.interviewBy ? formik.errors.interviewBy : '',\n    onChange: formik.handleChange,\n    value: formik.values.interviewBy,\n    name: \"interviewBy\",\n    label: \"Interview By\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    className: styleClasses.dropDown,\n    labelId: \"demo-simple-select-label\",\n    id: \"assignTo\",\n    variant: \"outlined\",\n    size: \"small\",\n    value: assignTo,\n    onChange: event => setAssignTo(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"assignTo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 33\n    }\n  }, \"Assign To\"), adminUsers.map(user => {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      value: user.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 49\n      }\n    }, user.Username);\n  })))))));\n};\n\n_s(AddInterviewComponent, \"TBS5FzWHEl/mCS/H+kCCvC97TTU=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useFormik];\n});\n\n_c = AddInterviewComponent;\nexport default AddInterviewComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddInterviewComponent\");","map":{"version":3,"sources":["E:/Work-Files/Maxffort/Client-Projects/HSST-Madhi-Consultancy/Code/dev/edu-project/live/edu-app-admin/src/components/AddInterviewComponent/index.js"],"names":["React","useState","useRef","useEffect","useFormik","Yup","TextField","Button","MenuItem","InputLabel","makeStyles","Select","Grid","Card","CardContent","Typography","useDispatch","useSelector","Backdrop","CircularProgress","CustomTextField","CustomDateField","StyleSharp","api","getCredentials","SnackBar","resetSelectedStudents","moment","useStyles","theme","backdrop","zIndex","drawer","color","container","display","flex","form","flexDirection","heading","fontSize","fontWeight","dropDown","height","width","AddInterviewComponent","props","styleClasses","loading","setLoading","adminUsers","setAdminUsers","open","setOpen","message","setMesssage","severity","setSeverity","assignTo","setAssignTo","dispatch","selected","state","selectedStudents","formik","initialValues","interviewName","interviewBy","date","validationSchema","object","string","required","onSubmit","values","formValues","saveInterview","formRef","handleReset","resetForm","current","reset","getAdminUsers","interview","students","post","headers","Authorization","timeout","setTimeout","history","goBack","error","console","log","res","data","response","handleSubmit","errors","touched","handleChange","shrink","inputProps","min","format","event","setFieldValue","target","value","map","user","id","Username"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    TextField,\r\n    Button,\r\n    MenuItem,\r\n    InputLabel,\r\n    makeStyles,\r\n    Select,\r\n    Grid, Card, CardContent, Typography\r\n} from '@material-ui/core';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CustomTextField from '../CustomTextField';\r\nimport CustomDateField from '../CustomDateField';\r\nimport { StyleSharp } from '@material-ui/icons';\r\nimport api from '../../api/api';\r\nimport { getCredentials } from '../../services/authService';\r\nimport SnackBar from '../SnackBar';\r\nimport { resetSelectedStudents} from 'actions/studentActions'\r\nimport moment from 'moment'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n    container: {\r\n        display: 'flex',\r\n        flex: 1\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        flexDirection: 'column'\r\n    },\r\n    heading: {\r\n        fontSize: 14,\r\n        fontWeight: 600\r\n    },\r\n    dropDown: {\r\n        height: 35,\r\n        width: 200\r\n    },\r\n\r\n}));\r\n\r\nconst AddInterviewComponent = (props) => {\r\n    const styleClasses = useStyles();\r\n    const [loading, setLoading] = useState(false);\r\n    const [adminUsers, setAdminUsers] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [message, setMesssage] = useState('');\r\n    const [severity, setSeverity] = useState('');\r\n    const [assignTo, setAssignTo] = useState('assignTo');\r\n    const dispatch = useDispatch()\r\n\r\n    const { selected } = useSelector((state) => state.selectedStudents);\r\n\r\n    useEffect(() => {\r\n        dispatch(resetSelectedStudents())\r\n        return () => {\r\n        }\r\n    }, [])\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            interviewName: '',\r\n            interviewBy: '',\r\n            date: '',\r\n            assignTo: 'assignTo'\r\n        },\r\n        validationSchema: Yup.object({\r\n            interviewName: Yup.string().required('This field is required'),\r\n            interviewBy: Yup.string().required('This field is required'),\r\n            date: Yup.date().required('This field is required'),\r\n        }),\r\n        onSubmit: (values) => {\r\n            const formValues = {\r\n                ...values, assignTo\r\n            };\r\n            saveInterview(formValues, selected);\r\n        }\r\n    });\r\n\r\n    const formRef = useRef(null);\r\n\r\n    const handleReset = () => {\r\n        formik.resetForm();\r\n        formRef.current.reset();\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAdminUsers();\r\n    },[]);\r\n\r\n    const saveInterview = async (interview, students) => {\r\n        try {\r\n            setLoading(true);\r\n            await api.post(\r\n                \"/admin/saveInterview\",\r\n                {interview, students},\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${getCredentials()}`,\r\n                    },\r\n                },\r\n                { timeout: 1000 }\r\n            );\r\n            handleReset();\r\n            setLoading(false);\r\n            setMesssage('Interview succesfully created');\r\n            setSeverity('success');\r\n            setOpen(true);\r\n            setTimeout(()=>{props.history.goBack()},1000);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setMesssage('Interview creation failed');\r\n            setSeverity('error');\r\n            setOpen(true);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const getAdminUsers = async () => {\r\n        try {\r\n            const res = await api.post(\r\n                \"/admin/getAdminUsers\",\r\n                null,\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${getCredentials()}`,\r\n                    },\r\n                },\r\n                { timeout: 1000 }\r\n            );\r\n            setAdminUsers(res.data.response);\r\n        } catch (error) {   \r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styleClasses.container}>\r\n            {loading && (\r\n                <Backdrop className={styleClasses.backdrop} open={loading} >\r\n                    <CircularProgress color=\"primary\" />\r\n                </Backdrop>\r\n            )}\r\n            {open && (\r\n                <SnackBar open={open} message={message} severity={severity} setOpen={setOpen} />\r\n            )}\r\n\r\n            <form ref={formRef} noValidate className={styleClasses.form} onSubmit={formik.handleSubmit}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Grid\r\n                            container\r\n                            justify=\"center\"\r\n                        >\r\n                            <Typography variant=\"h6\" className={styleClasses.heading}>\r\n                                Create Interview\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"flex-end\"\r\n                        >\r\n                            <Button\r\n                                variant='contained'\r\n                                color='primary'\r\n                                size='small'\r\n                                type='submit'\r\n                            >\r\n                                Upload\r\n                             </Button>\r\n                        </Grid>\r\n                        <Grid \r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-around\"\r\n                        >\r\n                            <CustomTextField\r\n                                error={!!formik.errors.interviewName && formik.touched.interviewName}\r\n                                helperText={\r\n                                    !!formik.errors.interviewName && formik.touched.interviewName\r\n                                        ? formik.errors.interviewName\r\n                                        : ''\r\n                                }\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.interviewName}\r\n                                name='interviewName'\r\n                                label='Interview Name'\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                            <CustomDateField\r\n                                label='Date of Interview'\r\n                                type='date'\r\n                                name='date'\r\n                                InputProps={{inputProps: { min:moment().format('YYYY-MM-DD')} }}\r\n                                error={!!formik.errors.date && formik.touched.date}\r\n                                helperText={\r\n                                    !!formik.errors.date && formik.touched.date\r\n                                        ? formik.errors.date\r\n                                        : ''\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                                value={formik.values.date}\r\n                                onChange={(event) => {\r\n                                    formik.setFieldValue('date', event.target.value);\r\n                                }}\r\n                            />\r\n\r\n\r\n                        </Grid>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-around\"\r\n                        >\r\n                            <CustomTextField\r\n                                error={!!formik.errors.interviewBy && formik.touched.interviewBy}\r\n                                helperText={\r\n                                    !!formik.errors.interviewBy && formik.touched.interviewBy\r\n                                        ? formik.errors.interviewBy\r\n                                        : ''\r\n                                }\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.interviewBy}\r\n                                name='interviewBy'\r\n                                label='Interview By'\r\n                            />\r\n\r\n                            <Select\r\n                                className={styleClasses.dropDown}\r\n                                labelId='demo-simple-select-label'\r\n                                id='assignTo'\r\n                                variant='outlined'\r\n                                size=\"small\"\r\n                                value={assignTo}\r\n                                onChange={(event) => setAssignTo(event.target.value)}\r\n                            >\r\n                                <MenuItem value='assignTo'>Assign To</MenuItem>\r\n                                {\r\n                                    adminUsers.map((user) => {\r\n                                        return (<MenuItem value={user.id}>{user.Username}</MenuItem>)\r\n                                    })\r\n                                }\r\n                            </Select>\r\n\r\n                        </Grid>\r\n                    </CardContent>\r\n                </Card>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddInterviewComponent;"]},"metadata":{},"sourceType":"module"}