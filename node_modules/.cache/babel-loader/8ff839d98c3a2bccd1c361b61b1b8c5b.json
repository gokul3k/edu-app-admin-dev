{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work-Files\\\\Maxffort\\\\Client-Projects\\\\HSST-Madhi-Consultancy\\\\Code\\\\dev\\\\edu-project\\\\live\\\\edu-app-admin\\\\src\\\\components\\\\InterviewStudentSelection\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, makeStyles, Grid, Select, MenuItem, TextField, Button } from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport api from '../../api/api';\nimport { getCredentials } from '../../services/authService';\nconst useStyles = makeStyles(theme => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff'\n  },\n  container: {\n    display: 'flex',\n    flex: 1,\n    width: '100%',\n    marginTop: 24\n  },\n  card: {\n    width: '100%'\n  },\n  heading: {\n    color: '#4169E1',\n    fontWeight: \"bold\"\n  },\n  dropDown: {\n    height: 24\n  },\n  form: {\n    width: '100%'\n  },\n  textField: {\n    marginLeft: 24\n  },\n  formGroup: {\n    marginLeft: 24\n  },\n  gridItem: {\n    marginTop: 16\n  }\n}));\n\nfunction InterviewStudentSelection(props) {\n  _s();\n\n  const classes = useStyles();\n  const [status, setStatus] = useState('pending');\n  const [rejectState, setRejectState] = useState({\n    aptitude: false,\n    language: false,\n    logical: false,\n    coding: false,\n    others: false\n  });\n  const [selectState, setSelectState] = useState({\n    aptitude: false,\n    language: false,\n    logical: false,\n    coding: false,\n    others: false\n  });\n  const [studentData, setStudentData] = useState({});\n  const [interviewId, setInterviewId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setInterviewId(props.match.params.intId);\n    getInterviewStudentData(props.match.params.id, props.match.params.intId);\n  }, []);\n\n  const getInterviewStudentData = async (studentId, interview) => {\n    try {\n      const res = await api.post(\"/admin/getInterviewStudentDetail\", {\n        studentId,\n        interview\n      }, {\n        headers: {\n          Authorization: `Bearer ${getCredentials()}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }, {\n        timeout: 1000\n      });\n      setStudentData(res.data.response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const submitInterview = async (interviewId, studentId, studentName, selectionStatus, timesAttended = '', postponedDate = '', reason = '', salary = '', improvements = '', joiningDate = '') => {\n    const apiData = {\n      interviewId,\n      studentId,\n      studentName,\n      selectionStatus,\n      timesAttended,\n      postponedDate,\n      reason,\n      salary,\n      improvements,\n      joiningDate\n    };\n    console.log(\"APID ATTA \", apiData);\n\n    try {\n      const res = await api.post(\"/admin/addInterviewResult\", {\n        apiData\n      }, {\n        headers: {\n          Authorization: `Bearer ${getCredentials()}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }, {\n        timeout: 1000\n      });\n      setLoading(false);\n      props.history.replace('/app/interviews/detail/' + interviewId);\n      console.log(\"RESONSESSS \", res.data);\n    } catch (error) {\n      setLoading(false);\n      console.log(error);\n    }\n  };\n\n  const submitInterviewStudentData = async (values, selectState, rejectState, status) => {\n    setLoading(true);\n    const studentId = studentData.id;\n\n    if (status === 'selected') {\n      var reason = '';\n\n      for (const property in selectState) {\n        if (selectState[property]) {\n          if (property === 'others') {\n            reason += values.selectReason;\n          } else {\n            reason += String(property) + \", \";\n          }\n        }\n      }\n\n      submitInterview(interviewId, studentData.id, studentData.Name, status, studentData.Count, values.postponedDate, reason, values.salary, values.improvements, values.joiningDate);\n    } else if (status === 'rejected') {\n      var reason = '';\n\n      for (const property in rejectState) {\n        if (rejectState[property]) {\n          if (property === 'others') {\n            reason += values.rejectReason;\n          } else {\n            reason += String(property) + \", \";\n          }\n        }\n      }\n\n      submitInterview(interviewId, studentData.id, studentData.Name, status, studentData.Count, values.postponedDate, reason, values.salary, values.improvements, values.joiningDate);\n    } else if (status === 'postponed') {\n      submitInterview(interviewId, studentData.id, studentData.Name, status, studentData.Count, values.postponedDate, reason, values.salary, values.improvements, values.joiningDate);\n    }\n  };\n\n  const handleRejectionChange = event => {\n    setRejectState({ ...rejectState,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const handleSelectionChange = event => {\n    setSelectState({ ...selectState,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      selectReason: '',\n      salary: '',\n      joiningDate: '',\n      postponedDate: '',\n      rejectReason: '',\n      improvements: ''\n    },\n    onSubmit: values => {\n      submitInterviewStudentData(values, selectState, rejectState, status);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, loading && /*#__PURE__*/React.createElement(Backdrop, {\n    className: classes.backdrop,\n    open: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    noValidate: true,\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"space-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    direction: \"column\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignContent: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 37\n    }\n  }, \"Candidate ID :\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.subHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 37\n    }\n  }, studentData.id)), /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignContent: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 37\n    }\n  }, \"Times Attended :\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.subHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 37\n    }\n  }, studentData.Count)), status === 'selected' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignContent: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 45\n    }\n  }, \"Reason for Selection :\"), /*#__PURE__*/React.createElement(FormGroup, {\n    column: true,\n    className: classes.formGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: selectState.aptitude,\n      onChange: handleSelectionChange,\n      name: \"aptitude\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 62\n      }\n    }),\n    label: \"Aptitude\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: selectState.language,\n      onChange: handleSelectionChange,\n      name: \"language\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 62\n      }\n    }),\n    label: \"Language\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: selectState.logical,\n      onChange: handleSelectionChange,\n      name: \"logical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 62\n      }\n    }),\n    label: \"Logical Reasoning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: selectState.coding,\n      onChange: handleSelectionChange,\n      name: \"coding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 62\n      }\n    }),\n    label: \"Coding\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: selectState.others,\n      onChange: handleSelectionChange,\n      name: \"others\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 62\n      }\n    }),\n    label: \"Others\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 49\n    }\n  }), selectState.others && /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-multiline-static\",\n    multiline: true,\n    rows: 4,\n    placeholder: \"Specify the reasons\",\n    variant: \"outlined\",\n    name: \"selectReason\",\n    value: formik.values.selectReason,\n    onChange: event => {\n      formik.setFieldValue('selectReason', event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 53\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignContent: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 45\n    }\n  }, \"Salary Package :\"), /*#__PURE__*/React.createElement(TextField, {\n    name: \"salary\",\n    size: \"small\",\n    variant: \"outlined\",\n    type: \"text\",\n    value: formik.values.salary,\n    onChange: event => {\n      formik.setFieldValue('salary', event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 45\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignContent: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 45\n    }\n  }, \"Joining Date\"), /*#__PURE__*/React.createElement(TextField, {\n    className: classes.textField,\n    size: \"small\",\n    type: \"date\",\n    variant: \"outlined\",\n    name: \"joiningDate\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: formik.values.joiningDate,\n    onChange: event => {\n      formik.setFieldValue('joiningDate', event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 45\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    direction: \"column\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignContent: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 37\n    }\n  }, \"Candidate Name :\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.subHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 37\n    }\n  }, studentData.Name)), /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignContent: \"flex-start\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 37\n    }\n  }, \"Status :\"), /*#__PURE__*/React.createElement(Select, {\n    className: classes.dropDown,\n    labelId: \"demo-simple-select-label\",\n    id: \"status\",\n    variant: \"outlined\",\n    size: \"small\",\n    value: status,\n    onChange: event => setStatus(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"pending\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 41\n    }\n  }, \"Pending\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"selected\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 41\n    }\n  }, \"Selected\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"rejected\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 41\n    }\n  }, \"Rejected\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"postponed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 41\n    }\n  }, \"Postponed\"))), status === 'postponed' && /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignContent: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 41\n    }\n  }, \"Postponed Date :\"), /*#__PURE__*/React.createElement(TextField, {\n    className: classes.textField,\n    size: \"small\",\n    type: \"date\",\n    variant: \"outlined\",\n    name: \"postponedDate\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: formik.values.postponedDate,\n    onChange: event => {\n      formik.setFieldValue('postponedDate', event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 41\n    }\n  })), status === 'rejected' && /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignContent: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 41\n    }\n  }, \"Reason for Rejection :\"), /*#__PURE__*/React.createElement(FormGroup, {\n    column: true,\n    className: classes.formGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: rejectState.aptitude,\n      onChange: handleRejectionChange,\n      name: \"aptitude\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 58\n      }\n    }),\n    label: \"Aptitude\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: rejectState.language,\n      onChange: handleRejectionChange,\n      name: \"language\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 58\n      }\n    }),\n    label: \"Language\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: rejectState.logical,\n      onChange: handleRejectionChange,\n      name: \"logical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 58\n      }\n    }),\n    label: \"Logical Reasoning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: rejectState.coding,\n      onChange: handleRejectionChange,\n      name: \"coding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 58\n      }\n    }),\n    label: \"Coding\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: rejectState.others,\n      onChange: handleRejectionChange,\n      name: \"others\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 58\n      }\n    }),\n    label: \"Others\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 45\n    }\n  }), rejectState.others && /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-multiline-static\",\n    multiline: true,\n    rows: 4,\n    placeholder: \"Specify the reasons\",\n    variant: \"outlined\",\n    name: \"rejectReason\",\n    value: formik.values.rejectReason,\n    onChange: event => {\n      formik.setFieldValue('rejectReason', event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 49\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignContent: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 37\n    }\n  }, \"Sectors to Improve :\"), /*#__PURE__*/React.createElement(TextField, {\n    className: classes.textField,\n    id: \"outlined-multiline-static\",\n    multiline: true,\n    rows: 4,\n    placeholder: \"Comment if any...\",\n    variant: \"outlined\",\n    name: \"improvements\",\n    value: formik.values.improvements,\n    onChange: event => {\n      formik.setFieldValue('improvements', event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    size: \"small\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 29\n    }\n  }, \"Submit\"))))));\n}\n\n_s(InterviewStudentSelection, \"xXlRp9GJ+woyo3JriEOzZeunjjo=\", false, function () {\n  return [useStyles, useFormik];\n});\n\n_c = InterviewStudentSelection;\nexport default InterviewStudentSelection;\n\nvar _c;\n\n$RefreshReg$(_c, \"InterviewStudentSelection\");","map":{"version":3,"sources":["E:/Work-Files/Maxffort/Client-Projects/HSST-Madhi-Consultancy/Code/dev/edu-project/live/edu-app-admin/src/components/InterviewStudentSelection/index.js"],"names":["React","useState","useEffect","Card","CardContent","makeStyles","Grid","Select","MenuItem","TextField","Button","useFormik","Yup","FormGroup","FormControlLabel","Backdrop","CircularProgress","Checkbox","api","getCredentials","useStyles","theme","backdrop","zIndex","drawer","color","container","display","flex","width","marginTop","card","heading","fontWeight","dropDown","height","form","textField","marginLeft","formGroup","gridItem","InterviewStudentSelection","props","classes","status","setStatus","rejectState","setRejectState","aptitude","language","logical","coding","others","selectState","setSelectState","studentData","setStudentData","interviewId","setInterviewId","loading","setLoading","match","params","intId","getInterviewStudentData","id","studentId","interview","res","post","headers","Authorization","timeout","data","response","error","console","log","submitInterview","studentName","selectionStatus","timesAttended","postponedDate","reason","salary","improvements","joiningDate","apiData","history","replace","submitInterviewStudentData","values","property","selectReason","String","Name","Count","rejectReason","handleRejectionChange","event","target","name","checked","handleSelectionChange","formik","initialValues","onSubmit","handleSubmit","subHeading","setFieldValue","value","shrink"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, makeStyles, Grid, Select, MenuItem, TextField, Button } from '@material-ui/core';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport api from '../../api/api';\r\nimport { getCredentials } from '../../services/authService';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n    container: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        width: '100%',\r\n        marginTop: 24\r\n    },\r\n    card: {\r\n        width: '100%'\r\n    },\r\n    heading: {\r\n        color: '#4169E1',\r\n        fontWeight: \"bold\",\r\n    },\r\n    dropDown: {\r\n        height: 24,\r\n    },\r\n    form: {\r\n        width: '100%'\r\n    },\r\n    textField: {\r\n        marginLeft: 24\r\n    },\r\n    formGroup: {\r\n        marginLeft: 24\r\n    },\r\n    gridItem: {\r\n        marginTop: 16\r\n    }\r\n}));\r\n\r\nfunction InterviewStudentSelection(props) {\r\n\r\n    const classes = useStyles();\r\n    const [status, setStatus] = useState('pending');\r\n    const [rejectState, setRejectState] = useState({\r\n        aptitude: false,\r\n        language: false,\r\n        logical: false,\r\n        coding: false,\r\n        others: false\r\n    });\r\n\r\n    const [selectState, setSelectState] = useState({\r\n        aptitude: false,\r\n        language: false,\r\n        logical: false,\r\n        coding: false,\r\n        others: false\r\n    });\r\n\r\n    const [studentData, setStudentData] = useState({});\r\n\r\n    const [interviewId, setInterviewId] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setInterviewId(props.match.params.intId);\r\n        getInterviewStudentData(props.match.params.id, props.match.params.intId);\r\n    }, []);\r\n\r\n    const getInterviewStudentData = async (studentId, interview) => {\r\n        try {\r\n            const res = await api.post(\r\n                \"/admin/getInterviewStudentDetail\",\r\n                { studentId, interview }, {\r\n                headers: {\r\n                    Authorization: `Bearer ${getCredentials()}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            },\r\n                { timeout: 1000 }\r\n            );\r\n            setStudentData(res.data.response);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const submitInterview = async (interviewId, studentId, studentName, selectionStatus, timesAttended = '', postponedDate = '', reason = '', salary = '', improvements = '', joiningDate = '') => {\r\n        const apiData = {\r\n            interviewId,\r\n            studentId,\r\n            studentName,\r\n            selectionStatus,\r\n            timesAttended,\r\n            postponedDate,\r\n            reason,\r\n            salary,\r\n            improvements,\r\n            joiningDate\r\n        };\r\n        console.log(\"APID ATTA \", apiData);\r\n        try {\r\n            const res = await api.post(\r\n                \"/admin/addInterviewResult\",\r\n                { apiData }, {\r\n                headers: {\r\n                    Authorization: `Bearer ${getCredentials()}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            },\r\n                { timeout: 1000 }\r\n            );\r\n            setLoading(false);\r\n            props.history.replace('/app/interviews/detail/'+interviewId);\r\n            console.log(\"RESONSESSS \", res.data);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const submitInterviewStudentData = async (values, selectState, rejectState, status) => {\r\n        setLoading(true);\r\n        const studentId = studentData.id;\r\n        if (status === 'selected') {\r\n            var reason = '';\r\n            for (const property in selectState) {\r\n                if (selectState[property]) {\r\n                    if (property === 'others') {\r\n                        reason += values.selectReason;\r\n                    } else {\r\n                        reason += String(property) + \", \";\r\n                    }\r\n                }\r\n            }\r\n            submitInterview(interviewId, studentData.id, studentData.Name, status, studentData.Count, values.postponedDate, reason, values.salary, values.improvements, values.joiningDate);\r\n        } else if (status === 'rejected') {\r\n            var reason = '';\r\n            for (const property in rejectState) {\r\n                if (rejectState[property]) {\r\n                    if (property === 'others') {\r\n                        reason += values.rejectReason;\r\n                    } else {\r\n                        reason += String(property) + \", \";\r\n                    }\r\n                }\r\n            }\r\n            submitInterview(interviewId, studentData.id, studentData.Name, status, studentData.Count, values.postponedDate, reason, values.salary, values.improvements, values.joiningDate);\r\n        } else if (status === 'postponed') {\r\n            submitInterview(interviewId, studentData.id, studentData.Name, status, studentData.Count, values.postponedDate, reason, values.salary, values.improvements, values.joiningDate);\r\n        }\r\n    }\r\n\r\n    const handleRejectionChange = (event) => {\r\n        setRejectState({ ...rejectState, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    const handleSelectionChange = (event) => {\r\n        setSelectState({ ...selectState, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            selectReason: '',\r\n            salary: '',\r\n            joiningDate: '',\r\n            postponedDate: '',\r\n            rejectReason: '',\r\n            improvements: ''\r\n        },\r\n        onSubmit: (values) => {\r\n            submitInterviewStudentData(values, selectState, rejectState, status);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            {loading && (\r\n                <Backdrop className={classes.backdrop} open={loading} >\r\n                    <CircularProgress color=\"primary\" />\r\n                </Backdrop>\r\n            )}\r\n            <form onSubmit={formik.handleSubmit} noValidate className={classes.form}>\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-around\"\r\n                        >\r\n                            <Grid\r\n                                item\r\n                                direction=\"column\"\r\n                                justify=\"space-between\"\r\n                            >\r\n                                <Grid\r\n                                    className={classes.gridItem}\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justify=\"space-between\"\r\n                                    alignContent=\"flex-start\"\r\n                                >\r\n                                    <p className={classes.heading}>Candidate ID :</p>\r\n                                    <p className={classes.subHeading}>{studentData.id}</p>\r\n                                </Grid>\r\n\r\n                                <Grid\r\n                                    className={classes.gridItem}\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justify=\"space-between\"\r\n                                    alignContent=\"flex-start\"\r\n                                >\r\n                                    <p className={classes.heading}>Times Attended :</p>\r\n                                    <p className={classes.subHeading}>{studentData.Count}</p>\r\n                                </Grid>\r\n\r\n                                {\r\n                                    status === 'selected' &&\r\n                                    <>\r\n                                        <Grid\r\n                                            className={classes.gridItem}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"space-between\"\r\n                                            alignContent=\"flex-start\"\r\n                                        >\r\n                                            <p className={classes.heading}>Reason for Selection :</p>\r\n                                            <FormGroup column className={classes.formGroup}>\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox checked={selectState.aptitude} onChange={handleSelectionChange} name=\"aptitude\" />}\r\n                                                    label=\"Aptitude\"\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox checked={selectState.language} onChange={handleSelectionChange} name=\"language\" />}\r\n                                                    label=\"Language\"\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox checked={selectState.logical} onChange={handleSelectionChange} name=\"logical\" />}\r\n                                                    label=\"Logical Reasoning\"\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox checked={selectState.coding} onChange={handleSelectionChange} name=\"coding\" />}\r\n                                                    label=\"Coding\"\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox checked={selectState.others} onChange={handleSelectionChange} name=\"others\" />}\r\n                                                    label=\"Others\"\r\n                                                />\r\n                                                {\r\n                                                    selectState.others &&\r\n                                                    <TextField\r\n                                                        id=\"outlined-multiline-static\"\r\n                                                        multiline\r\n                                                        rows={4}\r\n                                                        placeholder=\"Specify the reasons\"\r\n                                                        variant=\"outlined\"\r\n                                                        name=\"selectReason\"\r\n                                                        value={formik.values.selectReason}\r\n                                                        onChange={(event) => {\r\n                                                            formik.setFieldValue('selectReason', event.target.value);\r\n                                                        }}\r\n                                                    />\r\n                                                }\r\n                                            </FormGroup>\r\n                                        </Grid>\r\n\r\n                                        <Grid\r\n                                            className={classes.gridItem}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"space-between\"\r\n                                            alignContent=\"flex-start\"\r\n                                        >\r\n                                            <p className={classes.heading}>Salary Package :</p>\r\n                                            <TextField\r\n                                                name=\"salary\"\r\n                                                size=\"small\"\r\n                                                variant='outlined'\r\n                                                type=\"text\"\r\n                                                value={formik.values.salary}\r\n                                                onChange={(event) => {\r\n                                                    formik.setFieldValue('salary', event.target.value);\r\n                                                }}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid\r\n                                            className={classes.gridItem}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"space-between\"\r\n                                            alignContent=\"flex-start\"\r\n                                        >\r\n                                            <p className={classes.heading}>Joining Date</p>\r\n                                            <TextField\r\n                                                className={classes.textField}\r\n                                                size=\"small\"\r\n                                                type=\"date\"\r\n                                                variant='outlined'\r\n                                                name=\"joiningDate\"\r\n                                                InputLabelProps={{ shrink: true }}\r\n                                                value={formik.values.joiningDate}\r\n                                                onChange={(event) => {\r\n                                                    formik.setFieldValue('joiningDate', event.target.value);\r\n                                                }}\r\n                                            />\r\n                                        </Grid>\r\n                                    </>\r\n                                }\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid\r\n                                item\r\n                                direction=\"column\"\r\n                                justify=\"space-between\"\r\n                            >\r\n\r\n                                <Grid\r\n                                    className={classes.gridItem}\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justify=\"space-between\"\r\n                                    alignContent=\"flex-start\"\r\n                                >\r\n                                    <p className={classes.heading}>Candidate Name :</p>\r\n                                    <p className={classes.subHeading}>{studentData.Name}</p>\r\n                                </Grid>\r\n\r\n                                <Grid\r\n                                    className={classes.gridItem}\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justify=\"space-between\"\r\n                                    alignContent=\"flex-start\"\r\n                                    alignItems=\"center\"\r\n                                >\r\n                                    <p className={classes.heading}>Status :</p>\r\n                                    <Select\r\n                                        className={classes.dropDown}\r\n                                        labelId='demo-simple-select-label'\r\n                                        id='status'\r\n                                        variant='outlined'\r\n                                        size=\"small\"\r\n                                        value={status}\r\n                                        onChange={(event) => setStatus(event.target.value)}\r\n                                    >\r\n                                        <MenuItem value='pending'>Pending</MenuItem>\r\n                                        <MenuItem value='selected'>Selected</MenuItem>\r\n                                        <MenuItem value='rejected'>Rejected</MenuItem>\r\n                                        <MenuItem value='postponed'>Postponed</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                                {\r\n                                    status === 'postponed' &&\r\n                                    <Grid\r\n                                        className={classes.gridItem}\r\n                                        container\r\n                                        direction=\"row\"\r\n                                        justify=\"space-between\"\r\n                                        alignContent=\"flex-start\"\r\n                                    >\r\n                                        <p className={classes.heading}>Postponed Date :</p>\r\n                                        <TextField\r\n                                            className={classes.textField}\r\n                                            size=\"small\"\r\n                                            type=\"date\"\r\n                                            variant='outlined'\r\n                                            name=\"postponedDate\"\r\n                                            InputLabelProps={{ shrink: true }}\r\n                                            value={formik.values.postponedDate}\r\n                                            onChange={(event) => {\r\n                                                formik.setFieldValue('postponedDate', event.target.value);\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                }\r\n\r\n                                {\r\n                                    status === 'rejected' &&\r\n                                    <Grid\r\n                                        className={classes.gridItem}\r\n                                        container\r\n                                        direction=\"row\"\r\n                                        justify=\"space-between\"\r\n                                        alignContent=\"flex-start\"\r\n                                    >\r\n                                        <p className={classes.heading}>Reason for Rejection :</p>\r\n                                        <FormGroup column className={classes.formGroup}>\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={rejectState.aptitude} onChange={handleRejectionChange} name=\"aptitude\" />}\r\n                                                label=\"Aptitude\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={rejectState.language} onChange={handleRejectionChange} name=\"language\" />}\r\n                                                label=\"Language\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={rejectState.logical} onChange={handleRejectionChange} name=\"logical\" />}\r\n                                                label=\"Logical Reasoning\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={rejectState.coding} onChange={handleRejectionChange} name=\"coding\" />}\r\n                                                label=\"Coding\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={rejectState.others} onChange={handleRejectionChange} name=\"others\" />}\r\n                                                label=\"Others\"\r\n                                            />\r\n                                            {\r\n                                                rejectState.others &&\r\n                                                <TextField\r\n                                                    id=\"outlined-multiline-static\"\r\n                                                    multiline\r\n                                                    rows={4}\r\n                                                    placeholder=\"Specify the reasons\"\r\n                                                    variant=\"outlined\"\r\n                                                    name=\"rejectReason\"\r\n                                                    value={formik.values.rejectReason}\r\n                                                    onChange={(event) => {\r\n                                                        formik.setFieldValue('rejectReason', event.target.value);\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n\r\n                                        </FormGroup>\r\n                                    </Grid>\r\n                                }\r\n\r\n\r\n                                <Grid\r\n                                    className={classes.gridItem}\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justify=\"space-between\"\r\n                                    alignContent=\"flex-start\"\r\n                                >\r\n                                    <p className={classes.heading}>Sectors to Improve :</p>\r\n                                    <TextField\r\n                                        className={classes.textField}\r\n                                        id=\"outlined-multiline-static\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        placeholder=\"Comment if any...\"\r\n                                        variant=\"outlined\"\r\n                                        name=\"improvements\"\r\n                                        value={formik.values.improvements}\r\n                                        onChange={(event) => {\r\n                                            formik.setFieldValue('improvements', event.target.value);\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n\r\n                        </Grid>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"flex-end\"\r\n                        >\r\n                            <Button\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                size='small'\r\n                                type='submit'\r\n                            >\r\n                                Submit\r\n                            </Button>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </Card>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InterviewStudentSelection;"]},"metadata":{},"sourceType":"module"}