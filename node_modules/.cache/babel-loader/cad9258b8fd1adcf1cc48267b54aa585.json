{"ast":null,"code":"import api from \"../api/api\";\nimport { GET_EXAM_FAIL, GET_EXAM_SUCCESS, GET_EXAM_REQUEST, GET_ALL_EXAMS, GET_EXAM_DETAIL, GET_EXAM_INSTRUCTIONS, GET_EXAM_QUESTIONS, PUBLISH_EXAM_FAIL, PUBLISH_EXAM_REQUEST, PUBLISH_EXAM_SUCCESS } from \"../constants/examConstants\";\nimport { getCredentials } from \"../services/authService\";\nimport Moment from 'moment';\n\nconst getAllExams = () => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await api.post(\"/admin/getExams\", {\n        limit: 10,\n        offset: 0\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${getCredentials()}`\n        }\n      }, {\n        timeout: 1000\n      });\n      dispatch({\n        type: GET_ALL_EXAMS,\n        payload: data.response\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst getExam = id => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: GET_EXAM_REQUEST\n      });\n      const {\n        data\n      } = await api.post(\"/admin/getExamDetails\", {\n        id\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${getCredentials()}`\n        }\n      }, {\n        timeout: 1000\n      });\n      console.log(data);\n      dispatch({\n        type: GET_EXAM_SUCCESS,\n        details: data.response.exam,\n        questions: data.response.questions,\n        instructions: data.response.instructions\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: GET_EXAM_FAIL\n      });\n    }\n  };\n};\n\nconst getExamDetails = details => ({\n  type: GET_EXAM_DETAIL,\n  details: details\n});\n\nconst getExamInstructions = instructions => ({\n  type: GET_EXAM_INSTRUCTIONS,\n  instructions: instructions\n});\n\nconst getExamQuestions = (questions, counts) => ({\n  type: GET_EXAM_QUESTIONS,\n  questions: questions,\n  counts: counts\n});\n\nconst createExam = (details, instructions, questions, students) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: PUBLISH_EXAM_REQUEST\n    });\n\n    try {\n      console.log(getState().publishExam);\n      const {\n        data\n      } = await api.post(\"/admin/createExam\", {\n        exam: { ...details,\n          startDate: Moment(details.StartDate).format(\"YYYY-MM-DD\"),\n          endDate: Moment(details.endDate).format('YYYY-MM-DD')\n        },\n        instructions: instructions,\n        questions: questions,\n        students\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${getCredentials()}`\n        }\n      }, {\n        timeout: 1000\n      });\n      dispatch({\n        type: PUBLISH_EXAM_SUCCESS,\n        payload: data.response\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: PUBLISH_EXAM_FAIL\n      });\n    }\n  };\n};\n\nconst resetPublishExam = () => ({\n  type: \"RESET_PUBLISH_EXAM\"\n});\n\nexport { getAllExams, createExam, getExamDetails, getExamQuestions, getExamInstructions, resetPublishExam, getExam };","map":{"version":3,"sources":["E:/Work-Files/Maxffort/Client-Projects/HSST-Madhi-Consultancy/Code/dev/edu-project/live/edu-app-admin/src/actions/examActions.js"],"names":["api","GET_EXAM_FAIL","GET_EXAM_SUCCESS","GET_EXAM_REQUEST","GET_ALL_EXAMS","GET_EXAM_DETAIL","GET_EXAM_INSTRUCTIONS","GET_EXAM_QUESTIONS","PUBLISH_EXAM_FAIL","PUBLISH_EXAM_REQUEST","PUBLISH_EXAM_SUCCESS","getCredentials","Moment","getAllExams","dispatch","data","post","limit","offset","headers","Authorization","timeout","type","payload","response","error","console","log","getExam","id","details","exam","questions","instructions","getExamDetails","getExamInstructions","getExamQuestions","counts","createExam","students","getState","publishExam","startDate","StartDate","format","endDate","resetPublishExam"],"mappings":"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","sourcesContent":["import api from \"../api/api\";\r\nimport {\r\n  GET_EXAM_FAIL,\r\n  GET_EXAM_SUCCESS,\r\n  GET_EXAM_REQUEST,\r\n  GET_ALL_EXAMS,\r\n  GET_EXAM_DETAIL,\r\n  GET_EXAM_INSTRUCTIONS,\r\n  GET_EXAM_QUESTIONS,\r\n  PUBLISH_EXAM_FAIL,\r\n  PUBLISH_EXAM_REQUEST,\r\n  PUBLISH_EXAM_SUCCESS,\r\n} from \"../constants/examConstants\";\r\nimport { getCredentials } from \"../services/authService\";\r\nimport Moment from 'moment';\r\n\r\nconst getAllExams = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const { data } = await api.post(\r\n        \"/admin/getExams\",\r\n        { limit: 10, offset: 0 },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${getCredentials()}`,\r\n          },\r\n        },\r\n        { timeout: 1000 }\r\n      );\r\n      dispatch({\r\n        type: GET_ALL_EXAMS,\r\n        payload: data.response,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\nconst getExam = (id) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: GET_EXAM_REQUEST });\r\n\r\n      const { data } = await api.post(\r\n        \"/admin/getExamDetails\",\r\n        { id },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${getCredentials()}`,\r\n          },\r\n        },\r\n        { timeout: 1000 }\r\n      );\r\n      console.log(data);\r\n      dispatch({\r\n        type: GET_EXAM_SUCCESS,\r\n        details: data.response.exam,\r\n        questions: data.response.questions,\r\n        instructions: data.response.instructions,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({ type: GET_EXAM_FAIL });\r\n    }\r\n  };\r\n};\r\n\r\nconst getExamDetails = (details) => ({\r\n  type: GET_EXAM_DETAIL,\r\n  details: details,\r\n});\r\nconst getExamInstructions = (instructions) => ({\r\n  type: GET_EXAM_INSTRUCTIONS,\r\n  instructions: instructions,\r\n}); \r\nconst getExamQuestions = (questions,counts) => ({\r\n  type: GET_EXAM_QUESTIONS,\r\n  questions: questions,\r\n  counts:counts\r\n});\r\n\r\nconst createExam = (details, instructions, questions, students) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({ type: PUBLISH_EXAM_REQUEST });\r\n    try {\r\n      console.log(getState().publishExam);\r\n      const { data } = await api.post(\r\n        \"/admin/createExam\",\r\n        {\r\n          exam: {\r\n            ...details,\r\n            startDate: Moment(details.StartDate).format(\"YYYY-MM-DD\"),\r\n            endDate:Moment(details.endDate).format('YYYY-MM-DD')\r\n          },\r\n          instructions: instructions,\r\n          questions: questions,\r\n          students\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${getCredentials()}`,\r\n          },\r\n        },\r\n        { timeout: 1000 }\r\n      );\r\n      dispatch({\r\n        type: PUBLISH_EXAM_SUCCESS,\r\n        payload: data.response,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({ type: PUBLISH_EXAM_FAIL });\r\n    }\r\n  };\r\n};\r\n\r\nconst resetPublishExam = () => ({ type: \"RESET_PUBLISH_EXAM\" });\r\n\r\nexport {\r\n  getAllExams,\r\n  createExam,\r\n  getExamDetails,\r\n  getExamQuestions,\r\n  getExamInstructions,\r\n  resetPublishExam,\r\n  getExam,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}